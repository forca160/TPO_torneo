@startuml
' Adapter package
package adapter {
  interface ServicioNotificacion
  class AdapterJavaMail
  class AdapterFirebase
  class Notificador
  class JavaMailService
  class FirebaseService
}

ServicioNotificacion <|.. AdapterJavaMail
ServicioNotificacion <|.. AdapterFirebase
AdapterJavaMail --> JavaMailService
AdapterFirebase --> FirebaseService
Notificador --> ServicioNotificacion

' Entities package
package entities {
  class Usuario {
    - String usuario
    - String email
    - String contrase√±a
    - Deporte deporteFavorito
    - NivelJuego nivel
    - String ubicacion
    + obtenerHistorialPartidos()
    + actualizar(tipo: TipoNotificacion, encuentro: Encuentro)
    + configurarNotificador(notificador: adapter.Notificador)
  }
  class Encuentro {
    - String id
    - Deporte deporte
    - int cantidadJugadoresNecesarios
    - int duracionMinutos
    - String ubicacion
    - LocalDateTime horario
    - EstadoPartido estado
    + confirmarParticipacion()
    + cambiarEstado(nuevoEstado: EstadoPartido)
    + verificarCapacidad()
    + agregarObserver(obs: observer.Observer)
    + removerObserver(obs: observer.Observer)
    + notificar(tipo: observer.TipoNotificacion)
  }
  class EstadisticasPartido{
  - String comentarios
  - Map<Usuario, String> comentariosJugadores
  - LocalDateTime fechaFinalizacion
}

Usuario ..|> observer.Observer
Encuentro ..|> observer.Subject

' Observer package
package observer {
  interface Observer
  interface Subject
  class Notificacion {
    - Usuario destinatario
    - String mensaje
    - TipoNotificacion tipo
    - LocalDateTime fechaCreacion
  }
  enum TipoNotificacion
}

Notificacion --> Usuario : destinatario
Notificacion --> TipoNotificacion
Encuentro "1" o-- "*" observer.Observer : observadores

' Facade package
package facade {
  class SistemaEncuentrosFacade
  enum TipoBusqueda
}

SistemaEncuentrosFacade --> services.GestorUsuarios
SistemaEncuentrosFacade --> services.GestorEncuentros
SistemaEncuentrosFacade --> strategy.BuscadorEncuentros

' Services package
package services {
  class GestorUsuarios
  class GestorEncuentros
  class SchedulerService
}

GestorUsuarios --> entities.Usuario
GestorEncuentros --> entities.Encuentro
GestorEncuentros ..> observer.TipoNotificacion : notificarNuevoPartido()

' Strategy package
package strategy {
  interface EstrategiaBusqueda
  class BuscadorEncuentros
  class BusquedaPorCercania
  class BusquedaPorHistorial
  class BusquedaPorNivel
}

EstrategiaBusqueda <|.. BusquedaPorCercania
EstrategiaBusqueda <|.. BusquedaPorHistorial
EstrategiaBusqueda <|.. BusquedaPorNivel
BuscadorEncuentros --> EstrategiaBusqueda

' State package
package state {
  interface EstadoPartido
  class Cancelado
  class Confirmado
  class EnJuego
  class Finalizado
  class NecesitamosJugadores
  class PartidoArmado
}

EstadoPartido <|.. Cancelado
EstadoPartido <|.. Confirmado
EstadoPartido <|.. EnJuego
EstadoPartido <|.. Finalizado
EstadoPartido <|.. NecesitamosJugadores
EstadoPartido <|.. PartidoArmado
Encuentro --> EstadoPartido

@enduml
