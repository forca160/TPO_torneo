@startuml
' Adapter package
package adapter {
  interface ServicioNotificacion{
    + void enviarNotificacion(Notificacion notificacion)
  }
  class AdapterJavaMail{
    - JavaMailService javaMailService
    + AdapterJavaMail(JavaMailService svc)
    + void enviarNotificacion(Notificacion notificacion)
  }
  class AdapterFirebase{
    - FirebaseService firebaseService
    + AdapterFirebase(FirebaseService svc)
    + void enviarNotificacion(Notificacion notificacion)
  }
  class Notificador{
    - ServicioNotificacion servicio
    + void setServicio(ServicioNotificacion servicio)
    + void enviar(Notificacion notificacion)
  }
  class JavaMailService{
    + void sendEmail(String to, String subject, String body)
  }
  class FirebaseService{
    + void sendPushNotification(String userToken, String message)
  }
}

ServicioNotificacion <|.. AdapterJavaMail
ServicioNotificacion <|.. AdapterFirebase
AdapterJavaMail --> JavaMailService
AdapterFirebase --> FirebaseService
Notificador --> ServicioNotificacion

' Entities package
package entities {
  class Usuario {
    - String usuario
    - String email
    - String contraseña
    - Deporte deporteFavorito
    - NivelJuego nivel
    - String ubicacion
    - Notificador notificador
    - List<Encuentro> historial
    + Usuario(String usuario, String email, String contraseña, Deporte deporteFavorito, NivelJuego nivel, Posicion ubicacion)
    + List<Encuentro> obtenerHistorialPartidos()
    + actualizar(tipo: TipoNotificacion, encuentro: Encuentro)
    + configurarNotificador(notificador: adapter.Notificador)
  }
  class Encuentro {
    - String id
    - Deporte deporte
    - int cantidadJugadoresNecesarios
    - int duracionMinutos
    - String ubicacion
    - LocalDateTime horario
    - EstadoPartido estado
    + confirmarParticipacion()
    + cambiarEstado(nuevoEstado: EstadoPartido)
    + verificarCapacidad()
    + agregarObserver(obs: observer.Observer)
    + removerObserver(obs: observer.Observer)
    + notificar(tipo: observer.TipoNotificacion)
  }
  class EstadisticasPartido{
  - String comentarios
  - Map<Usuario, String> comentariosJugadores
  - LocalDateTime fechaFinalizacion
  }
  enum NivelJuego {
    PRINCIPIANTE,
    INTERMEDIO,
    AVANZADO
  }
  class Posicion{
    - double lat
    - double lon
    + Posicion(double lat, double lon) 
    + double getLat()
    + double getLon()
    + void setLat(double lat)
    + void setLon(double lon)
  }

Usuario ..|> observer.Observer
Encuentro ..|> observer.Subject

' Observer package
package observer {
  interface Observer
  interface Subject
  class Notificacion {
    - Usuario destinatario
    - String mensaje
    - TipoNotificacion tipo
    - LocalDateTime fechaCreacion
  }
  enum TipoNotificacion
}

Notificacion --> Usuario : destinatario
Notificacion --> TipoNotificacion
Encuentro "1" o-- "*" observer.Observer : observadores

' Facade package
package facade {
  class SistemaEncuentrosFacade{
    - static GestorUsuarios gestorUsuarios
    - static GestorEncuentros gestorEncuentros
    - BuscadorEncuentros buscador
    + Usuario registrarUsuario(String usuario, String email, String contrasena, Deporte deporte, NivelJuego nivel, Posicion ubicacion, TipoDeEnvio tipoDeEnvio)
    + Encuentro crearEncuentro(String titulo, Deporte deporte, int cantidadJugadoresNecesarios, int duracionMinutos, Posicion ubicacion, LocalDateTime horario, Usuario organizador, NivelJuego nivelMinimo, NivelJuego nivelMaximo, boolean permitirCualquierNivel)
    + List<Encuentro> buscarEncuentros(Usuario u, TipoBusqueda tipo) 
    + void unirseEncuentro(Usuario u, String encuentroId)
    + void confirmarParticipacion(Usuario u, String encuentroId) 
    + List<Encuentro> buscaEncuentrosPorOrganizador(Usuario u) 
    + void finalizarEncuentro(String encuentroId)
    + boolean cancelarEncuentro(String id) 
    + Encuentro obtenerEncuentro(String id)
    + void empezarEncuentro(String id)
  }
  
  enum TipoBusqueda{
    POR_NIVEL
    POR_CERCANIA
    POR_HISTORIAL
  }
}

SistemaEncuentrosFacade --> services.GestorUsuarios
SistemaEncuentrosFacade --> services.GestorEncuentros
SistemaEncuentrosFacade --> strategy.BuscadorEncuentros

' Services package
package services {
  class GestorUsuarios
  class GestorEncuentros
  class SchedulerService
}

GestorUsuarios --> entities.Usuario
GestorEncuentros --> entities.Encuentro
GestorEncuentros ..> observer.TipoNotificacion : notificarNuevoPartido()

' Strategy package
package strategy {
  interface EstrategiaBusqueda{
    + List<Encuentro> buscarEncuentros(Usuario usuario)
  }
  class BuscadorEncuentros{
    - EstrategiaBusqueda estrategia
    + void setEstrategia(EstrategiaBusqueda estrategia)
    + List<Encuentro> buscar(Usuario usuario)
  }
  class BusquedaPorCercania{
    - double radioKm
    + BusquedaPorCercania(double radioKm)
    + List<Encuentro> buscarEncuentros(Usuario usuario)
    + double calcularDistancia(Posicion p1, Posicion p2)
  }
  class BusquedaPorHistorial{
    + List<Encuentro> buscarEncuentros(Usuario usuario)
    + List<Usuario> obtenerJugadoresPrevios(Usuario usuario)
  }
  class BusquedaPorNivel{
    + List<Encuentro> buscarEncuentros(Usuario usuario)
  }
}

EstrategiaBusqueda <|.. BusquedaPorCercania
EstrategiaBusqueda <|.. BusquedaPorHistorial
EstrategiaBusqueda <|.. BusquedaPorNivel
BuscadorEncuentros --> EstrategiaBusqueda

' State package
package state {
  interface EstadoPartido{
    + void manejarCambioEstado()
    + boolean puedeUnirse()
    + boolean puedeConfirmar()
    + String getMensage(String usuario, String deporte, LocalDateTime dia)
  }
  class Cancelado{
    - Encuentro encuentro
    + Cancelado(Encuentro encuentro)
    + void manejarCambioEstado()
    + boolean puedeUnirse()
    + boolean puedeConfirmar()
    + String getMensage(String usuario, String deporte, LocalDateTime dia)
  }
  class Confirmado{
    - Encuentro encuentro
    + Confirmado(Encuentro encuentro)
    + void manejarCambioEstado()
    + boolean puedeUnirse()
    + boolean puedeConfirmar()
    + String getMensage(String usuario, String deporte, LocalDateTime dia)
  }
  class EnJuego{
    - Encuentro encuentro
    + EnJuego(Encuentro encuentro)
    + void manejarCambioEstado()
    + boolean puedeUnirse()
    + boolean puedeConfirmar()
    + String getMensage(String usuario, String deporte, LocalDateTime dia)
  }
  class Finalizado{
    - Encuentro encuentro
    + Finalizado(Encuentro e)
    + String getMensage(String usuario, String deporte, LocalDateTime dia)
    + void manejarCambioEstado()
    + boolean puedeUnirse()
    + boolean puedeConfirmar()
  }
  class NecesitamosJugadores{
    - Encuentro encuentro
    + String getMensage(String usuario, String deporte, LocalDateTime dia)
    + NecesitamosJugadores(Encuentro e)
    + void manejarCambioEstado()
    + boolean puedeUnirse()
    + boolean puedeConfirmar()
  }
  class PartidoArmado{
    - Encuentro encuentro
    + PartidoArmado(Encuentro e)
    + String getMensage(String usuario, String deporte, LocalDateTime dia)
    + void manejarCambioEstado()
    + boolean puedeUnirse()
    + boolean puedeConfirmar()
  }
}

EstadoPartido <|.. Cancelado
EstadoPartido <|.. Confirmado
EstadoPartido <|.. EnJuego
EstadoPartido <|.. Finalizado
EstadoPartido <|.. NecesitamosJugadores
EstadoPartido <|.. PartidoArmado
Encuentro --> EstadoPartido

@enduml
